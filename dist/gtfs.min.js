var gtfsToAquius=gtfsToAquius||{"init":function init(configId){"use strict";function createElement(elementType,valueObject,styleObject){var values,styles,i;var element=document.createElement(elementType);if(typeof valueObject!=="undefined"){values=Object.keys(valueObject);for(i=0;i<values.length;i+=1){element[values[i]]=valueObject[values[i]]}}
if(typeof styleObject!=="undefined"){styles=Object.keys(styleObject);for(i=0;i<styles.length;i+=1){element.style[styles[i]]=styleObject[styles[i]]}}
return element}
function createTabulation(tableData,tableHeader,tableDataStyle,caption){var td,th,tr,i,j;var table=createElement("table");if(typeof caption!=="undefined"){table.appendChild(createElement("caption",{"textContent":caption}))}
if(tableHeader.length>0){tr=createElement("tr");for(i=0;i<tableHeader.length;i+=1){if(typeof tableHeader[i]==="object"){th=createElement("th");th.appendChild(tableHeader[i]);tr.appendChild(th)}else{tr.appendChild(createElement("th",{"textContent":tableHeader[i].toString()}))}}
table.appendChild(tr)}
for(i=0;i<tableData.length;i+=1){tr=createElement("tr");for(j=0;j<tableData[i].length;j+=1){if(typeof tableData[i][j]==="object"){td=createElement("td");td.appendChild(tableData[i][j])}else{td=createElement("td",{"textContent":tableData[i][j].toString()})}
if(typeof tableDataStyle!=="undefined"&&tableDataStyle.length>j){td.className=tableDataStyle[j]}
tr.appendChild(td)}
table.appendChild(tr)}
return table}
function initialiseUI(vars,loadFunction,prompt){var button,form,label;var baseDOM=document.getElementById(vars.configId);if(!baseDOM){return!1}
while(baseDOM.firstChild){baseDOM.removeChild(baseDOM.firstChild)}
if(!Object.keys||![].indexOf||typeof JSON!=="object"||!window.File||!window.FileReader||!window.Blob){baseDOM.appendChild(document.createTextNode("Browser not supported: Try a modern browser"));return!1}
document.head.appendChild(createElement("script",{"src":"https://timhowgego.github.io/Aquius/dist/aquius.min.js","type":"text/javascript"}));form=createElement("form",{"className":vars.configId+"Input"});label=createElement("label",{"textContent":prompt});button=createElement("input",{"id":vars.configId+"ImportFiles","multiple":"multiple","name":vars.configId+"ImportFiles[]","type":"file"});button.addEventListener("change",(function(){loadFunction(vars)}),!1);label.appendChild(button);form.appendChild(label);form.appendChild(createElement("span",{"id":vars.configId+"Progress"}));baseDOM.appendChild(form);baseDOM.appendChild(createElement("div",{"id":vars.configId+"Output"}));return!0}
function initialiseProcess(vars){var reader;var gtfs={};var nonText={};var fileDOM=document.getElementById(vars.configId+"ImportFiles");var options={"_vars":vars,"callback":outputProcess};var processedFiles=0;var progressDOM=document.getElementById(vars.configId+"Progress");var totalFiles=0;function loadFiles(files){var theChunk,chunkedSize,i;var maxFilesize=1e8;var fileList=[];for(i=0;i<files.length;i+=1){chunkedSize=0
while(files[i].size>=chunkedSize){fileList.push([files[i],parseInt(chunkedSize/maxFilesize,10)]);chunkedSize+=maxFilesize}}
totalFiles=fileList.length;for(i=0;i<totalFiles;i+=1){reader=new FileReader();reader.onerror=(function(evt,theFile){outputError(new Error("Could not read "+theFile[0].name),vars);reader.abort()});reader.onload=(function(theFile){return function(){try{onLoad(theFile[0].name,theFile[1],this.result)}catch(err){outputError(err,vars)}}})(fileList[i]);theChunk=fileList[i][0].slice(fileList[i][1]*maxFilesize,(fileList[i][1]*maxFilesize)+maxFilesize);reader.readAsText(theChunk)}}
function onLoad(filename,position,result){var filenameParts,json,key,keys,i;filenameParts=filename.toLowerCase().split(".");if(filenameParts.length>1&&filenameParts[filenameParts.length-1]==="txt"){key=filenameParts.slice(0,filenameParts.length-1).join(".");if(key in gtfs===!1){gtfs[key]=[]}
gtfs[key][position]=result}else{key=filenameParts.join(".");if(key in nonText===!1){nonText[key]=[]}
nonText[key][position]=result}
processedFiles+=1;if(processedFiles===totalFiles){keys=Object.keys(nonText);for(i=0;i<keys.length;i+=1){try{json=JSON.parse(nonText[keys[i]].join(""));if("type" in json&&json.type==="FeatureCollection"){options.geojson=json}else{options.config=json}}catch(err){if(err instanceof SyntaxError===!1){outputError(err,vars)}}}
vars.process(gtfs,options)}}
if(fileDOM!==null&&fileDOM.files.length>0){fileDOM.disabled=!0;if(progressDOM!==null){while(progressDOM.firstChild){progressDOM.removeChild(progressDOM.firstChild)}
progressDOM.textContent="Working..."}
loadFiles(fileDOM.files)}}
function outputProcess(error,out,options){var caption,content,keys,i;var vars=options._vars;var fileDOM=document.getElementById(vars.configId+"ImportFiles");var outputDOM=document.getElementById(vars.configId+"Output");var progressDOM=document.getElementById(vars.configId+"Progress");if(error!==undefined){outputError(error,vars);return!1}
if(!outputDOM||!progressDOM){return!1}
while(outputDOM.firstChild){outputDOM.removeChild(outputDOM.firstChild)}
while(progressDOM.firstChild){progressDOM.removeChild(progressDOM.firstChild)}
if(fileDOM!==null){fileDOM.disabled=!1}
outputDOM.className="";keys=["aquius","config"];for(i=0;i<keys.length;i+=1){if(keys[i]in out&&Object.keys(out[keys[i]]).length>0){if(keys[i]==="config"){content=JSON.stringify(out[keys[i]],null,1)}else{content=JSON.stringify(out[keys[i]])}
progressDOM.appendChild(createElement("a",{"className":vars.configId+"Download","href":window.URL.createObjectURL(new Blob([content],{type:"application/json;charset=utf-8"})),"download":keys[i]+".json","textContent":"Save "+keys[i]+".json","role":"button"}))}}
if("aquius" in out&&"translation" in out.aquius&&"en-US" in out.aquius.translation&&"link" in out.aquius.translation["en-US"]){caption=out.aquius.translation["en-US"].link}else{caption="Services"}
if(typeof aquius!=="undefined"&&"aquius" in out){outputDOM.appendChild(createElement("div",{"id":vars.configId+"Map"},{"height":(document.documentElement.clientHeight/2)+"px"}));aquius.init(vars.configId+"Map",{"dataObject":out.aquius,"uiStore":!1})}
if("warning" in out){for(i=0;i<out.warning.length;i+=1){outputDOM.appendChild(createElement("p",{"textContent":out.warning[i]}))}}
if("networkTable" in out){outputDOM.appendChild(createTabulation(out.networkTable.data,out.networkTable.header,out.networkTable.format,caption+" by Network"))}
if("summaryTable" in out){outputDOM.appendChild(createTabulation(out.summaryTable.data,out.summaryTable.header,out.summaryTable.format,caption+" % by Hour (scheduled only)"))}}
function outputError(error,vars){var message;var fileDOM=document.getElementById(vars.configId+"ImportFiles");var outputDOM=document.getElementById(vars.configId+"Output");var progressDOM=document.getElementById(vars.configId+"Progress");if(error!==undefined&&outputDOM!==null){while(outputDOM.firstChild){outputDOM.removeChild(outputDOM.firstChild)}
outputDOM.className=vars.configId+"OutputError";if("message" in error){message=error.message}else{message=JSON.stringify(error)}
outputDOM.appendChild(createElement("p",{"textContent":"Error: "+message}));if(progressDOM!==null){while(progressDOM.firstChild){progressDOM.removeChild(progressDOM.firstChild)}
progressDOM.textContent="Failed"}
if(fileDOM!==null){fileDOM.disabled=!1}}}
return initialiseUI({"configId":configId,"process":this.process},initialiseProcess,"GTFS as .txt, optional config, and optional GeoJSON to process:")},"process":function process(gtfs,options){"use strict";var out={"_":{},"aquius":{},"config":{},"summary":{}};function formatGtfsDate(dateMS){var dateDate=new Date(dateMS);var dateString=dateDate.getFullYear().toString();if(dateDate.getMonth()<9){dateString+="0"}
dateString+=(dateDate.getMonth()+1).toString();if(dateDate.getDate()<10){dateString+="0"}
dateString+=dateDate.getDate().toString();return dateString}
function unformatGtfsDate(dateString){if(typeof dateString==="undefined"||dateString.length<8){return 0}
return Date.UTC(dateString.slice(0,4),dateString.slice(4,6)-1,dateString.slice(6,8))}
function haversineDistance(lat1,lng1,lat2,lng2){var rad=Math.PI/180;var sinDLat=Math.sin((lat2-lat1)*rad/2);var sinDLon=Math.sin((lng2-lng1)*rad/2);var a=sinDLat*sinDLat+Math.cos(lat1*rad)*Math.cos(lat2*rad)*sinDLon*sinDLon;var c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return 6371000*c}
function parseConfig(out,options){var i;var defaults={"agencyPrefix":"","allowBlock":!1,"allowDuration":!1,"allowDwell":!1,"allowCabotage":!1,"allowCode":!0,"allowColor":!0,"allowDuplication":!1,"allowHeadsign":!1,"allowName":!0,"allowNoc":!1,"allowRoute":!0,"allowRouteLong":!1,"allowRouteUrl":!0,"allowSplit":!1,"allowStopUrl":!0,"allowWaypoint":!0,"allowZeroCoordinate":!0,"codeAsStopId":!1,"coordinatePrecision":5,"duplicationRouteOnly":!0,"fromDate":"","inGeojson":!0,"isCircular":[],"meta":{"schema":"0"},"mirrorLink":!0,"modeInclude":[],"networkFilter":{"type":"agency"},"nodeGeojson":{},"option":{},"populationProperty":"population","placeNameProperty":"name","productOverride":{},"routeExclude":[],"routeInclude":[],"routeOverride":{},"serviceFilter":{},"servicePer":1,"splitMinimumJoin":2,"stopExclude":[],"stopInclude":[],"stopOverride":{},"stopPlace":!1,"toDate":"","translation":{}};var keys=Object.keys(defaults);if(typeof options!=="object"){options={}}
for(i=0;i<keys.length;i+=1){if("config" in options&&keys[i]in options.config&&typeof options.config[keys[i]]===typeof defaults[keys[i]]){out.config[keys[i]]=options.config[keys[i]]}else{out.config[keys[i]]=defaults[keys[i]]}}
out._.circular={};for(i=0;i<out.config.isCircular.length;i+=1){out._.circular[out.config.isCircular[i]]=out.config.isCircular[i]}
return out}
function parseCsv(out,slug,csv){var firstLine,lastIndex,match,matches,residual,i,j;var columns=-1;var pattern=new RegExp(("(\\,|\\r?\\n|\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\,\\r\\n]*))"),"gi");var indexColumn=-1;var line=[];function processLine(out,line,slug,columns,indexColumn){if(line.length===columns){if(indexColumn!==-1){if(line[indexColumn]in out.gtfs[slug]===!1){out.gtfs[slug][line[indexColumn]]=[]}
out.gtfs[slug][line[indexColumn]].push(line)}else{out.gtfs[slug].push(line)}}
return out}
if(!Array.isArray(csv)){csv=[csv]}
for(i=0;i<csv.length;i+=1){matches=pattern.exec(csv[i]);lastIndex=line.length-1;firstLine=!0;while(matches!==null){if(matches[1].length&&matches[1]!==","){if(i>0&&firstLine===!0){if(line.length>columns&&lastIndex<line.length-1){residual=line.slice(0,lastIndex);residual.push(line[lastIndex]+line[lastIndex+1]);line=residual.concat(line.slice(lastIndex+2))}
firstLine=!1}
if(columns===-1){columns=line.length;for(j=0;j<line.length;j+=1){if(line[j]in out.gtfsHead[slug]){out.gtfsHead[slug][line[j]]=j}}
if(slug in out.gtfsRequired){for(j=0;j<out.gtfsRequired[slug].length;j+=1){if(out.gtfsHead[slug][out.gtfsRequired[slug][j]]===-1){if("error" in out===!1){out.error=[]}
out.error.push("Missing value "+out.gtfsRequired[slug][j]+" in GTFS "+slug+".txt");return out}}}
if(slug in out.gtfsIndex){indexColumn=out.gtfsHead[slug][out.gtfsIndex[slug]];if(indexColumn===-1){if("error" in out===!1){out.error=[]}
out.error.push("Missing index value "+out.gtfsIndex[slug]+" in GTFS "+slug+".txt");return out}
out.gtfs[slug]={}}else{out.gtfs[slug]=[]}}else{out=processLine(out,line,slug,columns,indexColumn)}
line=[]}
if(matches[2]){match=matches[2].replace(new RegExp("\"\"","g"),"\"")}else{match=matches[3]}
if(match===undefined){match=""}
line.push(match.trim());matches=pattern.exec(csv[i])}}
out=processLine(out,line,slug,columns,indexColumn);return out}
function parseGtfs(out,gtfs){var keys,i;out.gtfsIndex={"stop_times":"trip_id"};out.gtfsHead={"agency":{"agency_id":-1,"agency_name":-1,"agency_noc":-1},"calendar":{"service_id":-1,"monday":-1,"tuesday":-1,"wednesday":-1,"thursday":-1,"friday":-1,"saturday":-1,"sunday":-1,"start_date":-1,"end_date":-1},"calendar_dates":{"service_id":-1,"date":-1,"exception_type":-1},"frequencies":{"trip_id":-1,"start_time":-1,"end_time":-1,"headway_secs":-1},"routes":{"agency_id":-1,"route_color":-1,"route_id":-1,"route_long_name":-1,"route_short_name":-1,"route_text_color":-1,"route_url":-1},"stop_times":{"arrival_time":-1,"departure_time":-1,"trip_id":-1,"stop_id":-1,"stop_sequence":-1,"pickup_type":-1,"drop_off_type":-1},"stops":{"stop_code":-1,"stop_id":-1,"stop_lat":-1,"stop_lon":-1,"stop_name":-1,"stop_url":-1,"location_type":-1,"parent_station":-1},"transfers":{"from_stop_id":-1,"to_stop_id":-1,"transfer_type":-1},"trips":{"block_id":-1,"direction_id":-1,"route_id":-1,"service_id":-1,"trip_headsign":-1,"trip_id":-1,"trip_short_name":-1}};out.gtfsRequired={"routes":["route_id"],"stops":["stop_id","stop_lat","stop_lon"],"trips":["route_id","service_id","trip_id"],"stop_times":["trip_id","stop_id","stop_sequence"]};if(("type" in out.config.networkFilter&&out.config.networkFilter.type==="mode")||out.config.modeInclude.length>0){out.gtfsHead.routes.route_type=-1}
if("name" in out.config.meta===!1||"en-US" in out.config.meta.name===!1){if("feed_info" in out.gtfsHead===!1){out.gtfsHead.feed_info={}}
out.gtfsHead.feed_info.feed_publisher_name=-1}
if("url" in out.config.meta===!1){if("feed_info" in out.gtfsHead===!1){out.gtfsHead.feed_info={}}
out.gtfsHead.feed_info.feed_publisher_url=-1}
keys=Object.keys(out.gtfsRequired);for(i=0;i<keys.length;i+=1){if(keys[i]in gtfs===!1){if("error" in out===!1){out.error=[]}
out.error.push("Missing GTFS "+keys[i]+".txt");return out}}
out.gtfs={};keys=Object.keys(out.gtfsHead);for(i=0;i<keys.length;i+=1){if(keys[i]in gtfs){out=parseCsv(out,keys[i],gtfs[keys[i]])}}
return out}
function defaultDates(out){var i,maxDateMS,minDateMS,startDateMS,endDateMS,theDateMS,useStartDateMS,useEndDateMS,avgDateMS;var defaultStartEndOffsetMS=5184e5;if(out.gtfsHead.calendar.start_date!==-1&&out.gtfsHead.calendar.end_date!==-1&&out.gtfs.calendar.length>0){for(i=0;i<out.gtfs.calendar.length;i+=1){startDateMS=unformatGtfsDate(out.gtfs.calendar[i][out.gtfsHead.calendar.start_date]);endDateMS=unformatGtfsDate(out.gtfs.calendar[i][out.gtfsHead.calendar.end_date]);if(typeof minDateMS==="undefined"||startDateMS<minDateMS){minDateMS=startDateMS}
if(typeof maxDateMS==="undefined"||endDateMS>maxDateMS){maxDateMS=endDateMS}}}else if(out.gtfsHead.calendar_dates.date!==-1&&out.gtfs.calendar_dates.length>0){for(i=0;i<out.gtfs.calendar_dates.length;i+=1){theDateMS=unformatGtfsDate(out.gtfs.calendar_dates[i][out.gtfsHead.calendar_dates.date]);if(typeof minDateMS==="undefined"||theDateMS<minDateMS){minDateMS=theDateMS}
if(typeof maxDateMS==="undefined"||theDateMS>maxDateMS){maxDateMS=theDateMS}}}
if(typeof out.config.fromDate!=="undefined"&&out.config.fromDate!==""){useStartDateMS=unformatGtfsDate(out.config.fromDate)}
if(typeof out.config.toDate!=="undefined"&&out.config.toDate!==""){useEndDateMS=unformatGtfsDate(out.config.toDate);if(typeof useStartDateMS==="undefined"){useStartDateMS=useEndDateMS-defaultStartEndOffsetMS}}
if(typeof useStartDateMS==="undefined"){useStartDateMS=Date.now()}
if(typeof useEndDateMS==="undefined"){useEndDateMS=useStartDateMS+defaultStartEndOffsetMS}
if(typeof minDateMS!=="undefined"&&typeof maxDateMS!=="undefined"&&(useStartDateMS<minDateMS||useEndDateMS>maxDateMS)){if((maxDateMS-minDateMS)<defaultStartEndOffsetMS){useStartDateMS=minDateMS;useEndDateMS=maxDateMS}else{avgDateMS=(minDateMS+maxDateMS)/2;useStartDateMS=avgDateMS-(defaultStartEndOffsetMS/2);useEndDateMS=avgDateMS+(defaultStartEndOffsetMS/2)}}
out.config.fromDate=formatGtfsDate(useStartDateMS);out.config.toDate=formatGtfsDate(useEndDateMS);return out}
function buildHeader(out){if("schema" in out.config.meta===!1||out.config.meta.schema!=="0"){out.config.meta.schema="0"}
if("name" in out.config.meta===!1){out.config.meta.name={}}
if("en-US" in out.config.meta.name===!1){if("feed_info" in out.gtfs&&out.gtfsHead.feed_info.feed_publisher_name!==-1&&out.gtfs.feed_info.length>0){out.config.meta.name["en-US"]=out.gtfs.feed_info[0][out.gtfsHead.feed_info.feed_publisher_name]+" "}else{out.config.meta.name["en-US"]=""}
out.config.meta.name["en-US"]+="("+out.config.fromDate;if(out.config.fromDate!==out.config.toDate){out.config.meta.name["en-US"]+="-"+out.config.toDate}
out.config.meta.name["en-US"]+=")"}
if("url" in out.config.meta===!1&&"feed_info" in out.gtfs&&out.gtfsHead.feed_info.feed_publisher_url!==-1&&out.gtfs.feed_info.length>0){out.config.meta.url=out.gtfs.feed_info[0][out.gtfsHead.feed_info.feed_publisher_url]}
out.aquius.meta=out.config.meta;if("en-US" in out.config.translation===!1){out.config.translation["en-US"]={}}
if("link" in out.config.translation["en-US"]===!1){switch(out.config.servicePer){case 1:out.config.translation["en-US"].link="Daily Services";break;case 7:out.config.translation["en-US"].link="Weekly Services";break;default:out.config.translation["en-US"].link="Services per "+out.config.servicePer+" Days";break}}
out.aquius.translation=out.config.translation;if("c" in out.config.option===!1||"k" in out.config.option===!1){out.config.option.c=parseFloat(out.gtfs.stops[0][out.gtfsHead.stops.stop_lon]);out.config.option.k=parseFloat(out.gtfs.stops[0][out.gtfsHead.stops.stop_lat]);out.config.option.m=12}
if("x" in out.config.option===!1||"y" in out.config.option===!1){out.config.option.x=parseFloat(out.gtfs.stops[0][out.gtfsHead.stops.stop_lon]);out.config.option.y=parseFloat(out.gtfs.stops[0][out.gtfsHead.stops.stop_lat]);out.config.option.z=10}
out.aquius.option=out.config.option;return out}
function buildNetwork(out){var agencyColumn,index,keys,nameExtra,product,i,j;var modeLookup={"0":{"en-US":"Tram"},"1":{"en-US":"Metro"},"2":{"en-US":"Rail"},"3":{"en-US":"Bus"},"4":{"en-US":"Ferry"},"5":{"en-US":"Cable car"},"6":{"en-US":"Cable car"},"7":{"en-US":"Funicular"},"100":{"en-US":"Rail"},"101":{"en-US":"High speed rail"},"102":{"en-US":"Long distance rail"},"103":{"en-US":"Inter-regional rail"},"105":{"en-US":"Sleeper rail"},"106":{"en-US":"Regional rail"},"107":{"en-US":"Tourist rail"},"108":{"en-US":"Rail shuttle"},"109":{"en-US":"Suburban rail"},"200":{"en-US":"Coach"},"201":{"en-US":"International coach"},"202":{"en-US":"National coach"},"204":{"en-US":"Regional coach"},"208":{"en-US":"Commuter coach"},"400":{"en-US":"Urban rail"},"401":{"en-US":"Metro"},"402":{"en-US":"Underground"},"405":{"en-US":"Monorail"},"700":{"en-US":"Bus"},"701":{"en-US":"Regional bus"},"702":{"en-US":"Express bus"},"704":{"en-US":"Local bus"},"800":{"en-US":"Trolleybus"},"900":{"en-US":"Tram"},"1000":{"en-US":"Water"},"1300":{"en-US":"Telecabin"},"1400":{"en-US":"Funicular"},"1501":{"en-US":"Shared taxi"},"1700":{"en-US":"Other"},"1701":{"en-US":"Cable car"},"1702":{"en-US":"Horse-drawn"}};if("type" in out.config.networkFilter===!1){out.config.networkFilter.type="agency"}
if("reference" in out.config.networkFilter===!1){out.config.networkFilter.reference={}}
out._.productIndex={};if("reference" in out.aquius===!1){out.aquius.reference={}}
out.aquius.reference.product=[];switch(out.config.networkFilter.type){case "mode":if("route_type" in out.gtfsHead.routes&&out.gtfsHead.routes.route_type!==-1&&out.gtfs.routes.length>0){index=0;for(i=0;i<out.gtfs.routes.length;i+=1){if(out.gtfs.routes[i][out.gtfsHead.routes.route_type]in out._.productIndex===!1){out._.productIndex[out.gtfs.routes[i][out.gtfsHead.routes.route_type]]=index;if(out.gtfs.routes[i][out.gtfsHead.routes.route_type]in out.config.networkFilter.reference===!1){if(out.gtfs.routes[i][out.gtfsHead.routes.route_type]in modeLookup){out.config.networkFilter.reference[out.gtfs.routes[i][out.gtfsHead.routes.route_type]]=modeLookup[out.gtfs.routes[i][out.gtfsHead.routes.route_type]]}else{out.config.networkFilter.reference[out.gtfs.routes[i][out.gtfsHead.routes.route_type]]={}}}
out.aquius.reference.product[index]=out.config.networkFilter.reference[out.gtfs.routes[i][out.gtfsHead.routes.route_type]];index+=1}}}
break;case "agency":default:out.config.networkFilter.type="agency";if("agency" in out.gtfs&&(("agency_id" in out.gtfsHead.agency&&out.gtfsHead.agency.agency_id!==-1)||("agency_name" in out.gtfsHead.agency&&out.gtfsHead.agency.agency_name!==-1))&&out.gtfs.agency.length>0){index=0;if("agency_id" in out.gtfsHead.agency&&out.gtfsHead.agency.agency_id!==-1){agencyColumn=out.gtfsHead.agency.agency_id}else{agencyColumn=out.gtfsHead.agency.agency_name}
for(i=0;i<out.gtfs.agency.length;i+=1){if(out.gtfs.agency[i][agencyColumn]!==undefined&&out.gtfs.agency[i][agencyColumn]!==""&&out.gtfs.agency[i][agencyColumn]in out._.productIndex===!1){out._.productIndex[out.gtfs.agency[i][agencyColumn]]=index;if(out.gtfs.agency[i][agencyColumn]in out.config.networkFilter.reference===!1){nameExtra=(out.config.allowNoc===!0&&out.gtfsHead.agency.agency_noc!==-1)?" ["+out.gtfs.agency[i][out.gtfsHead.agency.agency_noc]+"]":"";if(out.gtfsHead.agency.agency_name!==-1){out.config.networkFilter.reference[out.gtfs.agency[i][agencyColumn]]={"en-US":out.config.agencyPrefix+out.gtfs.agency[i][out.gtfsHead.agency.agency_name]+nameExtra}}else{out.config.networkFilter.reference[out.gtfs.agency[i][agencyColumn]]={"en-US":out.config.agencyPrefix+out.gtfs.agency[i][out.gtfsHead.agency.agency_id]+nameExtra}}}
out.aquius.reference.product[index]=out.config.networkFilter.reference[out.gtfs.agency[i][agencyColumn]];index+=1}}}
if(Object.keys(out._.productIndex).length===0){out._.productIndex.agency=0;out.config.networkFilter.reference.agency={};out.aquius.reference.product[0]={}}
break}
if("network" in out.config.networkFilter===!1||!Array.isArray(out.config.networkFilter.network)){out.config.networkFilter.network=[];keys=Object.keys(out._.productIndex);switch(out.config.networkFilter.type){case "mode":out.config.networkFilter.network.push([keys,{"en-US":"All modes"}]);if(keys.length>1){for(i=0;i<keys.length;i+=1){if(keys[i]in modeLookup){out.config.networkFilter.network.push([[keys[i]],modeLookup[keys[i]]])}else{out.config.networkFilter.network.push([[keys[i]],{"en-US":"Mode #"+keys[i]}])}}}
break;case "agency":out.config.networkFilter.network.push([keys,{"en-US":"All operators"}]);if(keys.length>1){for(i=0;i<keys.length;i+=1){if("agency" in out.gtfs&&out.gtfsHead.agency.agency_id!==-1&&out.gtfsHead.agency.agency_name!==-1){for(j=0;j<out.gtfs.agency.length;j+=1){if(out.gtfs.agency[j][out.gtfsHead.agency.agency_id]===keys[i]){nameExtra=(out.config.allowNoc===!0&&out.gtfsHead.agency.agency_noc!==-1)?" ["+out.gtfs.agency[j][out.gtfsHead.agency.agency_noc]+"]":"";out.config.networkFilter.network.push([[keys[i]],{"en-US":out.config.agencyPrefix+out.gtfs.agency[j][out.gtfsHead.agency.agency_name]+nameExtra}]);break}}}else{out.config.networkFilter.network.push([[keys[i]],{"en-US":keys[i]}])}}}
break;default:out.config.networkFilter.network.push([keys,{"en-US":"All"}]);break}}
out.aquius.network=[];for(i=0;i<out.config.networkFilter.network.length;i+=1){if(out.config.networkFilter.network[i].length>1&&Array.isArray(out.config.networkFilter.network[i][0])&&typeof out.config.networkFilter.network[i][1]==="object"){product=[];for(j=0;j<out.config.networkFilter.network[i][0].length;j+=1){if(out.config.networkFilter.network[i][0][j]in out._.productIndex){product.push(out._.productIndex[out.config.networkFilter.network[i][0][j]])}}
out.aquius.network.push([product,out.config.networkFilter.network[i][1],{}])}}
return out}
function buildService(out){var weekdays,i;if("serviceFilter" in out.config&&"type" in out.config.serviceFilter&&out.config.serviceFilter.type==="period"){if("period" in out.config.serviceFilter===!1||!Array.isArray(out.config.serviceFilter.period)||out.config.serviceFilter.period.length===0){weekdays=["monday","tuesday","wednesday","thursday","friday"];out.config.serviceFilter.period=[{"name":{"en-US":"Typical day"}},{"day":weekdays,"name":{"en-US":"Typical weekday"}},{"day":weekdays,"name":{"en-US":"Weekday early"},"time":[{"end":"10:00:00"}]},{"day":weekdays,"name":{"en-US":"Weekday 10:00-17:00"},"time":[{"start":"10:00:00","end":"17:00:00"}]},{"day":weekdays,"name":{"en-US":"Weekday evening"},"time":[{"start":"17:00:00"}]},{"day":["saturday"],"name":{"en-US":"Saturday"}},{"day":["sunday"],"name":{"en-US":"Sunday"}}]}
out.aquius.service=[];for(i=0;i<out.config.serviceFilter.period.length;i+=1){if("name" in out.config.serviceFilter.period[i]===!1){out.config.serviceFilter.period[i].name={"en-US":"Period "+i}}
out.aquius.service.push([[i],out.config.serviceFilter.period[i].name,{}])}}
return out}
function addToReference(out,key,value){if("reference" in out.aquius===!1){out.aquius.reference={}}
if(key in out.aquius.reference===!1){out.aquius.reference[key]=[];out._[key]={}}
if(value in out._[key]===!1){out.aquius.reference[key].push(value);out._[key][value]=out.aquius.reference[key].length-1}
return out}
function createNodeProperties(out,stopObject,index){var codeString,contentString,position,wildcard;var properties={};function withinKeys(properties,reference){var match,i,j;var keys=Object.keys(properties);for(i=0;i<reference.length;i+=1){match=!0;for(j=0;j<keys.length;j+=1){if(keys[j]in reference[i]===!1||reference[i][keys[j]]!==properties[keys[j]]){match=!1;break}}
if(match===!0){return!0}}
return!1}
if(out.config.allowName===!0){contentString="";if(stopObject[out.gtfsHead.stops.stop_id]in out.config.stopOverride&&"stop_name" in out.config.stopOverride[stopObject[out.gtfsHead.stops.stop_id]]){contentString=out.config.stopOverride[stopObject[out.gtfsHead.stops.stop_id]].stop_name}else{if(out.gtfsHead.stops.stop_name!==-1){contentString=stopObject[out.gtfsHead.stops.stop_name].trim()}}
if(contentString!==""){properties.n=contentString}}
if(out.config.allowStopUrl===!0){contentString="";if(stopObject[out.gtfsHead.stops.stop_id]in out.config.stopOverride&&"stop_url" in out.config.stopOverride[stopObject[out.gtfsHead.stops.stop_id]]){contentString=out.config.stopOverride[stopObject[out.gtfsHead.stops.stop_id]].stop_url}else{if(out.gtfsHead.stops.stop_url!==-1){contentString=stopObject[out.gtfsHead.stops.stop_url].trim()}}
if(contentString!==""){wildcard="[*]";position=contentString.lastIndexOf(wildcard);if(position===-1&&out.gtfsHead.stops.stop_code!==-1){codeString=stopObject[out.gtfsHead.stops.stop_code].trim();position=contentString.lastIndexOf(codeString);if(position!==-1){contentString=contentString.substring(0,position)+wildcard+contentString.substring(position+codeString.length);properties.i=codeString}}
if(position===-1&&out.gtfsHead.stops.stop_id!==-1){codeString=stopObject[out.gtfsHead.stops.stop_id].trim();position=contentString.lastIndexOf(codeString);if(position!==-1){contentString=contentString.substring(0,position)+wildcard+contentString.substring(position+codeString.length);properties.i=codeString}}
out=addToReference(out,"url",contentString);properties.u=out._.url[contentString]}}
if(Object.keys(properties).length>0){if("r" in out.aquius.node[index][2]){if(withinKeys(properties,out.aquius.node[index][2].r)===!1){out.aquius.node[index][2].r.push(properties)}}else{out.aquius.node[index][2].r=[properties]}}
if(out.config.allowCode){properties={};if(out.config.codeAsStopId){properties.n=stopObject[out.gtfsHead.stops.stop_id].trim()}else{if(stopObject[out.gtfsHead.stops.stop_id]in out.config.stopOverride&&"stop_code" in out.config.stopOverride[stopObject[out.gtfsHead.stops.stop_id]]){properties.n=out.config.stopOverride[stopObject[out.gtfsHead.stops.stop_id]].stop_code}else{if(out.gtfsHead.stops.stop_code!==-1){properties.n=stopObject[out.gtfsHead.stops.stop_code].trim()}}}
if("n" in properties&&properties.n!==""){if("r" in out.aquius.node[index][2]){if(withinKeys(properties,out.aquius.node[index][2].r)===!1){out.aquius.node[index][2].r.push(properties)}}else{out.aquius.node[index][2].r=[properties]}}}
return out}
function stopCoordinates(out,stopsObject){var precision=Math.pow(10,out.config.coordinatePrecision);function parseCoord(value,precision){var numericValue=parseFloat(value);if(Number.isNaN(numericValue)){return 0}
return Math.round(numericValue*precision)/precision}
if(out.gtfsHead.stops.stop_id!==-1&&stopsObject[out.gtfsHead.stops.stop_id]in out.config.stopOverride&&"x" in out.config.stopOverride[stopsObject[out.gtfsHead.stops.stop_id]]&&"y" in out.config.stopOverride[stopsObject[out.gtfsHead.stops.stop_id]]){return[parseCoord(out.config.stopOverride[stopsObject[out.gtfsHead.stops.stop_id]].x,precision),parseCoord(out.config.stopOverride[stopsObject[out.gtfsHead.stops.stop_id]].y,precision)]}
if(out.gtfsHead.stops.stop_lat!==-1&&out.gtfsHead.stops.stop_lon!==-1){return[parseCoord(stopsObject[out.gtfsHead.stops.stop_lon],precision),parseCoord(stopsObject[out.gtfsHead.stops.stop_lat],precision)]}
return[0,0]}
function checkStopCoordinates(out,coords,stopId){if(coords[0]===0&&coords[1]===0){if(stopId in out.config.stopOverride===!1){out.config.stopOverride[stopId]={}}
out.config.stopOverride[stopId].x=0;out.config.stopOverride[stopId].y=0}
return out}
function stopFilter(out){var i;if(out.config.stopExclude.length>0){out._.stopExclude={};for(i=0;i<out.config.stopExclude.length;i+=1){out._.stopExclude[out.config.stopExclude[i]]=""}}
if(out.config.stopInclude.length>0){out._.stopInclude={};for(i=0;i<out.config.stopInclude.length;i+=1){out._.stopInclude[out.config.stopInclude[i]]=""}}
return out}
function parentStopsToNode(out){var coords,index,key,i;var childStops=[];if(out.gtfsHead.stops.location_type!==-1&&out.gtfsHead.stops.parent_station!==-1){if("nodeLookup" in out._===!1){out._.nodeLookup={}}
if("nodeCoord" in out._===!1){out._.nodeCoord={}}
if("node" in out.aquius===!1){out.aquius.node=[]}
for(i=0;i<out.gtfs.stops.length;i+=1){if(("stopExclude" in out._===!1||out.gtfs.stops[i][out.gtfsHead.stops.stop_id]in out._.stopExclude===!1)&&("stopInclude" in out._===!1||out.gtfs.stops[i][out.gtfsHead.stops.stop_id]in out._.stopInclude)){if(out.gtfs.stops[i][out.gtfsHead.stops.location_type]==="1"){coords=stopCoordinates(out,out.gtfs.stops[i]);if(out.config.allowZeroCoordinate||(coords[0]!==0||coords[1]!==0)){out=checkStopCoordinates(out,coords,out.gtfs.stops[i][out.gtfsHead.stops.stop_id]);key=coords[0].toString()+","+coords[1].toString();if(key in out._.nodeCoord){index=out._.nodeCoord[key]}else{index=out.aquius.node.length;out.aquius.node.push([coords[0],coords[1],{}]);out._.nodeCoord[key]=index}
out._.nodeLookup[out.gtfs.stops[i][out.gtfsHead.stops.stop_id]]=index;out=createNodeProperties(out,out.gtfs.stops[i],index)}}else{if(out.gtfs.stops[i][out.gtfsHead.stops.parent_station]!==""){childStops.push([out.gtfs.stops[i][out.gtfsHead.stops.stop_id],out.gtfs.stops[i][out.gtfsHead.stops.parent_station]])}}}}
for(i=0;i<childStops.length;i+=1){if(childStops[i][1]in out._.nodeLookup){out._.nodeLookup[childStops[i][0]]=out._.nodeLookup[childStops[i][1]]}}}
return out}
function transferStopsToNode(out){var coords,index,key,fromStop,toStop,i,j;if("transfers" in out.gtfs&&out.gtfsHead.transfers.from_stop_id!==-1&&out.gtfsHead.transfers.to_stop_id!==-1&&out.gtfsHead.transfers.transfer_type!==1){if("nodeLookup" in out._===!1){out._.nodeLookup={}}
if("nodeCoord" in out._===!1){out._.nodeCoord={}}
if("node" in out.aquius===!1){out.aquius.node=[]}
for(i=0;i<out.gtfs.transfers.length;i+=1){if(out.gtfs.transfers[i][out.gtfsHead.transfers.from_stop_id]!==""&&("stopExclude" in out._===!1||(out.gtfs.transfers[i][out.gtfsHead.transfers.from_stop_id]in out._.stopExclude===!1&&out.gtfs.transfers[i][out.gtfsHead.transfers.to_stop_id]in out._.stopExclude===!1))&&("stopInclude" in out._===!1||(out.gtfs.transfers[i][out.gtfsHead.transfers.from_stop_id]in out._.stopInclude&&out.gtfs.transfers[i][out.gtfsHead.transfers.to_stop_id]in out._.stopInclude))){fromStop=out._.nodeLookup[out.gtfs.transfers[i][out.gtfsHead.transfers.from_stop_id]];toStop=out._.nodeLookup[out.gtfs.transfers[i][out.gtfsHead.transfers.to_stop_id]];if(fromStop!==toStop){if(fromStop!==undefined&&toStop!==undefined){}else{if(fromStop!==undefined){out._.nodeLookup[toStop]=fromStop}else{if(toStop!==undefined){out._.nodeLookup[fromStop]=toStop}else{if(fromStop===undefined&&toStop===undefined){for(j=0;j<out.gtfs.stops.length;j+=1){if(out.gtfs.stops[j][out.gtfsHead.stops.stop_id]===fromStop){coords=stopCoordinates(out,out.gtfs.stops[j]);if(out.config.allowZeroCoordinate||(coords[0]!==0||coords[1]!==0)){out=checkStopCoordinates(out,coords,out.gtfs.stops[j][out.gtfsHead.stops.stop_id]);key=coords[0].toString()+","+coords[1].toString();if(key in out._.nodeCoord){index=out._.nodeCoord[key]}else{index=out.aquius.node.length;out.aquius.node.push([coords[0],coords[1],{}]);out._.nodeCoord[key]=index}
out._.nodeLookup[fromStop]=index;out._.nodeLookup[toStop]=index;out=createNodeProperties(out,out.gtfs.stops[j],index);break}}}}}}}}}}}
return out}
function regularStopsToNode(out){var coords,index,key,i;if("nodeLookup" in out._===!1){out._.nodeLookup={}}
if("nodeCoord" in out._===!1){out._.nodeCoord={}}
if("node" in out.aquius===!1){out.aquius.node=[]}
for(i=0;i<out.gtfs.stops.length;i+=1){if(out.gtfs.stops[i].stop_id in out._.nodeLookup===!1&&out.gtfs.stops[i][out.gtfsHead.stops.stop_id]!==""&&("stopExclude" in out._===!1||out.gtfs.stops[i][out.gtfsHead.stops.stop_id]in out._.stopExclude===!1)&&("stopInclude" in out._===!1||out.gtfs.stops[i][out.gtfsHead.stops.stop_id]in out._.stopInclude)){coords=stopCoordinates(out,out.gtfs.stops[i]);if(out.config.allowZeroCoordinate||(coords[0]!==0||coords[1]!==0)){out=checkStopCoordinates(out,coords,out.gtfs.stops[i][out.gtfsHead.stops.stop_id]);key=coords[0].toString()+","+coords[1].toString();if(key in out._.nodeCoord){index=out._.nodeCoord[key]}else{index=out.aquius.node.length;out.aquius.node.push([coords[0],coords[1],{}]);out._.nodeCoord[key]=index}
out._.nodeLookup[out.gtfs.stops[i][out.gtfsHead.stops.stop_id]]=index;out=createNodeProperties(out,out.gtfs.stops[i],index)}}}
delete out._.nodeCoord;return out}
function getGtfsTimeSeconds(timeString){var conversion,i;var timeArray=timeString.split(":");if(timeArray.length!==3){return 0}
for(i=0;i<timeArray.length;i+=1){conversion=parseInt(timeArray[i],10);if(Number.isNaN(conversion)){return 0}
timeArray[i]=conversion}
return(timeArray[0]*3600)+(timeArray[1]*60)+timeArray[2]}
function getGtfsDay(dateMS){var dateDate=new Date(dateMS);var days=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];return days[dateDate.getDay()]}
function createCalendar(out){var fromDateMS=unformatGtfsDate(out.config.fromDate);var toDateMS=unformatGtfsDate(out.config.toDate);out._.calendar={};out._.calendarDay={};out._.calendarGtfs={};while(toDateMS>=fromDateMS){out._.calendar[fromDateMS]=formatGtfsDate(fromDateMS);out._.calendarDay[fromDateMS]=getGtfsDay(fromDateMS);out._.calendarGtfs[formatGtfsDate(fromDateMS)]=fromDateMS;fromDateMS+=864e5}
return out}
function serviceCalendar(out){var datesMS,endDateMS,serviceId,startDateMS,i,j;var calendar={};if("calendar" in out.gtfs){datesMS=Object.keys(out._.calendarDay);for(i=0;i<out.gtfs.calendar.length;i+=1){serviceId=out.gtfs.calendar[i][out.gtfsHead.calendar.service_id];startDateMS=unformatGtfsDate(out.gtfs.calendar[i][out.gtfsHead.calendar.start_date]);endDateMS=unformatGtfsDate(out.gtfs.calendar[i][out.gtfsHead.calendar.end_date]);for(j=0;j<datesMS.length;j+=1){if(datesMS[j]>=startDateMS&&datesMS[j]<=endDateMS&&out.gtfs.calendar[i][out.gtfsHead.calendar[out._.calendarDay[datesMS[j]]]]==="1"){if(serviceId in calendar===!1){calendar[serviceId]={}}
calendar[serviceId][datesMS[j]]=""}}}}
if("calendar_dates" in out.gtfs&&out.gtfsHead.calendar_dates.service_id!==-1&&out.gtfsHead.calendar_dates.date!==-1&&out.gtfsHead.calendar_dates.exception_type!==-1){for(i=0;i<out.gtfs.calendar_dates.length;i+=1){if(out.gtfs.calendar_dates[i][out.gtfsHead.calendar_dates.date]in out._.calendarGtfs){serviceId=out.gtfs.calendar_dates[i][out.gtfsHead.calendar_dates.service_id];if(serviceId in calendar===!1){calendar[serviceId]={}}
if(out.gtfs.calendar_dates[i][out.gtfsHead.calendar_dates.exception_type]==="1"){calendar[serviceId][out._.calendarGtfs[out.gtfs.calendar_dates[i][out.gtfsHead.calendar_dates.date]]]=""}
if(out.gtfs.calendar_dates[i][out.gtfsHead.calendar_dates.exception_type]==="2"&&out._.calendarGtfs[out.gtfs.calendar_dates[i][out.gtfsHead.calendar_dates.date]]in calendar[serviceId]){delete calendar[serviceId][out._.calendarGtfs[out.gtfs.calendar_dates[i][out.gtfsHead.calendar_dates.date]]]
if(Object.keys(calendar[serviceId]).length===0){delete calendar[serviceId]}}}}}
return calendar}
function frequentTrip(out){var i;var frequent={};if("frequencies" in out.gtfs&&out.gtfsHead.frequencies.trip_id!==-1){for(i=0;i<out.gtfs.frequencies.length;i+=1){frequent[out.gtfs.frequencies[i][out.gtfsHead.frequencies.trip_id]]=""}}
return frequent}
function baseTrip(out){var headsign,tripId,tripObject,i;var block={};var calendar=serviceCalendar(out);var frequent=frequentTrip(out);var tripBlock=[];var routeExclude={};var routeInclude={};if(out.config.routeExclude.length>0){for(i=0;i<out.config.routeExclude.length;i+=1){routeExclude[out.config.routeExclude[i]]=""}}
if(out.config.routeInclude.length>0){for(i=0;i<out.config.routeInclude.length;i+=1){routeInclude[out.config.routeInclude[i]]=""}}
out._.trip={};out._.routes={};for(i=0;i<out.gtfs.trips.length;i+=1){tripObject=out.gtfs.trips[i];if(tripObject[out.gtfsHead.trips.service_id]in calendar&&(out.config.routeExclude.length===0||tripObject[out.gtfsHead.trips.route_id]in routeExclude===!1)&&(out.config.routeInclude.length===0||tripObject[out.gtfsHead.trips.route_id]in routeInclude===!0)){tripId=tripObject[out.gtfsHead.trips.trip_id];if(tripObject[out.gtfsHead.trips.route_id]in out._.routes===!1){out._.routes[tripObject[out.gtfsHead.trips.route_id]]={}}
out._.trip[tripId]={"calendar":calendar[tripObject[out.gtfsHead.trips.service_id]],"route_id":tripObject[out.gtfsHead.trips.route_id],"service":[],"stops":[]};if(out.gtfsHead.trips.direction_id!==-1){out._.trip[tripId].direction_id=tripObject[out.gtfsHead.trips.direction_id]}else{out._.trip[tripId].direction_id=""}
if(tripId in frequent){out._.trip[tripId].frequent=""}
if(out.gtfsHead.stop_times.pickup_type!==-1){out._.trip[tripId].setdown=[]}
if(out.gtfsHead.stop_times.drop_off_type!==-1){out._.trip[tripId].pickup=[]}
if(out.config.allowBlock&&out.gtfsHead.trips.block_id!==-1&&tripObject[out.gtfsHead.trips.block_id]!==""){out._.trip[tripId].block={"id":tripObject[out.gtfsHead.trips.block_id]};tripBlock.push(tripId);if(tripObject[out.gtfsHead.trips.block_id]in block){block[tripObject[out.gtfsHead.trips.block_id]].push(tripId)}else{block[tripObject[out.gtfsHead.trips.block_id]]=[tripId]}}
if(out.config.allowHeadsign===!0&&out.gtfsHead.trips.trip_headsign!==-1){headsign=tripObject[out.gtfsHead.trips.trip_headsign].trim();if(headsign===""&&out.gtfsHead.trips.trip_short_name!==-1){headsign=tripObject[out.gtfsHead.trips.trip_short_name].trim()}
if(headsign!==""){out._.trip[tripId].reference={"n":headsign,"slug":headsign}}}}}
for(i=0;i<tripBlock.length;i+=1){out._.trip[tripBlock[i]].block.trips=block[out._.trip[tripBlock[i]].block.id]}
return out}
function timeTrip(out){var arrive,dates,depart,duplicate,dwell,key,keys,lastDepart,node,onOffCache,stopObject,times,i,j,k,l;var timeCache={};var trips=Object.keys(out.gtfs.stop_times);if(out.config.allowDuplicate===!1||out.config.allowSplit||out.config.allowCabotage){duplicate={}}
for(i=0;i<trips.length;i+=1){if(trips[i]in out._.trip){dates=Object.keys(out._.trip[trips[i]].calendar);lastDepart=null;onOffCache={};for(j=0;j<out.gtfs.stop_times[trips[i]].length;j+=1){stopObject=out.gtfs.stop_times[trips[i]][j];if(stopObject[out.gtfsHead.stop_times.stop_id]in out._.nodeLookup){node=out._.nodeLookup[stopObject[out.gtfsHead.stop_times.stop_id]];if(node in onOffCache===!1){onOffCache[node]={}}
if(out.gtfsHead.stop_times.pickup_type!==-1&&stopObject[out.gtfsHead.stop_times.pickup_type]==="1"&&out.gtfsHead.stop_times.drop_off_type!==-1&&stopObject[out.gtfsHead.stop_times.drop_off_type]==="1"){onOffCache[node].route=!0}else if(out.gtfsHead.stop_times.pickup_type!==-1&&stopObject[out.gtfsHead.stop_times.pickup_type]==="1"){onOffCache[node].setdown=!0}else if(out.gtfsHead.stop_times.drop_off_type!==-1&&stopObject[out.gtfsHead.stop_times.drop_off_type]==="1"){onOffCache[node].pickup=!0}else{onOffCache[node].both=!0}
if(out._.trip[trips[i]].stops.length===0||out._.trip[trips[i]].stops[out._.trip[trips[i]].stops.length-1][1]!==out._.nodeLookup[stopObject[out.gtfsHead.stop_times.stop_id]]){arrive=0;depart=0;dwell=0;if(out.gtfsHead.stop_times.departure_time!==-1&&stopObject[out.gtfsHead.stop_times.departure_time]!==""){if(stopObject[out.gtfsHead.stop_times.departure_time]in timeCache===!1){timeCache[stopObject[out.gtfsHead.stop_times.departure_time]]=getGtfsTimeSeconds(stopObject[out.gtfsHead.stop_times.departure_time])}
depart=timeCache[stopObject[out.gtfsHead.stop_times.departure_time]];if("start" in out._.trip[trips[i]]===!1||depart<out._.trip[trips[i]].start){out._.trip[trips[i]].start=depart}}
if(out.gtfsHead.stop_times.arrival_time!==-1&&stopObject[out.gtfsHead.stop_times.arrival_time]!==""){if(stopObject[out.gtfsHead.stop_times.arrival_time]in timeCache===!1){timeCache[stopObject[out.gtfsHead.stop_times.arrival_time]]=getGtfsTimeSeconds(stopObject[out.gtfsHead.stop_times.arrival_time])}
arrive=timeCache[stopObject[out.gtfsHead.stop_times.arrival_time]];if("end" in out._.trip[trips[i]]===!1||arrive>out._.trip[trips[i]].end){out._.trip[trips[i]].end=arrive}}
if(out.config.allowDwell&&arrive!==0&&depart>arrive){dwell=((depart-arrive)/60)}
out._.trip[trips[i]].stops.push([stopObject[out.gtfsHead.stop_times.stop_sequence],node,dwell]);if("frequent" in out._.trip[trips[i]]===!1){if(typeof duplicate!=="undefined"){times=[];if(arrive!==0||depart!==0){times.push({"key":[node,arrive,depart].join(":"),"node":node})}
if(out.config.allowSplit===!0&&arrive!==0&&out._.trip[trips[i]].stops.length>1){times.push({"key":[node,arrive,out._.trip[trips[i]].stops[out._.trip[trips[i]].stops.length-1]].join(":"),"node":node})}
if(lastDepart!==null){times.push({"key":[node,lastDepart.key].join(":"),"node":lastDepart.node})}
for(k=0;k<times.length;k+=1){key=[times[k].key,out._.trip[trips[i]].direction_id];if(out.config.duplicationRouteOnly){key.push(out._.trip[trips[i]].route_id)}
key=key.join(":");for(l=0;l<dates.length;l+=1){if(dates[l]in duplicate===!1){duplicate[dates[l]]={}}
if(key in duplicate[dates[l]]){if("dup" in out._.trip[trips[i]]===!1){out._.trip[trips[i]].dup={"stops":[],"trip_id":duplicate[dates[l]][key]}}
if(out._.trip[trips[i]].dup.stops.length===0||out._.trip[trips[i]].dup.stops.indexOf(times[k].node)===-1){out._.trip[trips[i]].dup.stops.push(times[k].node)}}else{duplicate[dates[l]][key]=trips[i]}}}
if(out.config.allowSplit===!0){if(depart!==0){lastDepart={"key":[depart,node].join(":"),"node":node}}else{lastDepart=null}}}}}}}
keys=Object.keys(onOffCache);for(j=0;j<keys.length;j+=1){if("both" in onOffCache[keys[j]]===!1){if("setdown" in onOffCache[keys[j]]&&"pickup" in onOffCache[keys[j]]===!1){out._.trip[trips[i]].setdown.push(parseInt(keys[j],10))}else if("pickup" in onOffCache[keys[j]]&&"setdown" in onOffCache[keys[j]]===!1){out._.trip[trips[i]].pickup.push(parseInt(keys[j],10))}else if("route" in onOffCache[keys[j]]){out._.trip[trips[i]].setdown.push(parseInt(keys[j],10));out._.trip[trips[i]].pickup.push(parseInt(keys[j],10))}}}}}
return out}
function duplicateTrip(out){var concurrentCount,dupCalendar,joinOk,keys,lastConcurrentIndex,parentCalendar,tripId,i,j;var nextB=0;var trips=Object.keys(out._.trip);function equalArrays(a,b){var i;if(a.length!==b.length){return!1}
for(i=0;i<a.length;i+=1){if(a[i]!==b[i]){return!1}}
return!0}
for(i=0;i<trips.length;i+=1){if("dup" in out._.trip[trips[i]]){tripId=out._.trip[trips[i]].dup.trip_id;if(out._.trip[trips[i]].dup.stops.length>1&&tripId in out._.trip){parentCalendar=[];keys=Object.keys(out._.trip[tripId].calendar);for(j=0;j<keys.length;j+=1){if(keys[j]in out._.trip[trips[i]].calendar===!1){parentCalendar.push(keys[j])}}
dupCalendar=[];keys=Object.keys(out._.trip[trips[i]].calendar);for(j=0;j<keys.length;j+=1){if(keys[j]in out._.trip[tripId].calendar===!1){dupCalendar.push(keys[j])}}
if(out.config.allowCabotage&&parentCalendar.length===0&&dupCalendar.length===0&&(out.gtfsHead.stop_times.pickup_type!==-1||out.gtfsHead.drop_off_type!==-1)&&(("setdown" in out._.trip[trips[i]]&&out._.trip[trips[i]].setdown.length>0&&"setdown" in out._.trip[tripId]&&equalArrays(out._.trip[tripId].setdown,out._.trip[trips[i]].setdown)===!1)||("pickup" in out._.trip[trips[i]]&&out._.trip[trips[i]].pickup.length>0&&"pickup" in out._.trip[tripId]&&equalArrays(out._.trip[tripId].pickup,out._.trip[trips[i]].pickup)===!1))){if("b" in out._.trip[tripId]){out._.trip[trips[i]].b=out._.trip[tripId].b}else{out._.trip[tripId].b=nextB;out._.trip[trips[i]].b=nextB;nextB+=1}}else{if(out.config.allowSplit&&out._.trip[trips[i]].dup.stops.length>=out.config.splitMinimumJoin&&out._.trip[trips[i]].dup.stops.length<out._.trip[trips[i]].stops.length){if(dupCalendar.length===0){out._.trip[trips[i]].t=[];lastConcurrentIndex=-1;concurrentCount=0;joinOk=!1;for(j=0;j<out._.trip[trips[i]].stops.length;j+=1){if(out._.trip[trips[i]].dup.stops.indexOf(out._.trip[trips[i]].stops[j][1])===-1){out._.trip[trips[i]].t.push(out._.trip[trips[i]].stops[j][1])}else{if(j-1===lastConcurrentIndex){concurrentCount+=1;if(concurrentCount===out.config.splitMinimumJoin){joinOk=!0}}else{concurrentCount=0}
lastConcurrentIndex=j}}
if(joinOk===!1){delete out._.trip[trips[i]].t}}else{if(parentCalendar.length===0){out._.trip[tripId].t=[];lastConcurrentIndex=-1;concurrentCount=0;joinOk=!1;keys={};for(j=0;j<out._.trip[trips[i]].stops.length;j+=1){keys[out._.trip[trips[i]].stops[j][1]]=""}
for(j=0;j<out._.trip[tripId].stops.length;j+=1){if(out._.trip[tripId].stops[j][1]in keys===!1){out._.trip[tripId].t.push(out._.trip[tripId].stops[j][1])}else{if(j-1===lastConcurrentIndex){concurrentCount+=1;if(concurrentCount===out.config.splitMinimumJoin){joinOk=!0}}else{concurrentCount=0}
lastConcurrentIndex=j}}
if(joinOk===!1){delete out._.trip[trips[i]].t}}}}else{if(out.config.allowDuplication===!1){if(dupCalendar.length===0){delete out._.trip[trips[i]]}else{out._.trip[trips[i]].calendar={};for(j=0;j<dupCalendar.length;j+=1){out._.trip[trips[i]].calendar[dupCalendar[j]]=""}}}}}}}}
return out}
function createDayFactor(out){var dayFactor,i,j,k;var allDays=Object.keys(out._.calendarDay);if("serviceFilter" in out.config&&"period" in out.config.serviceFilter){dayFactor=[];for(i=0;i<out.config.serviceFilter.period.length;i+=1){if("day" in out.config.serviceFilter.period[i]){dayFactor.push([]);for(j=0;j<out.config.serviceFilter.period[i].day.length;j+=1){for(k=0;k<allDays.length;k+=1){if(out._.calendarDay[allDays[k]]===out.config.serviceFilter.period[i].day[j]){dayFactor[i].push(allDays[k])}}}}else{dayFactor.push(allDays)}}
return dayFactor}else{return[allDays]}}
function createTimeFactor(out){var timeFactor,i,j;if("serviceFilter" in out.config&&"period" in out.config.serviceFilter){timeFactor=[];for(i=0;i<out.config.serviceFilter.period.length;i+=1){if("time" in out.config.serviceFilter.period[i]){timeFactor.push([]);for(j=0;j<out.config.serviceFilter.period[i].time.length;j+=1){if("start" in out.config.serviceFilter.period[i].time[j]){timeFactor[i].push([getGtfsTimeSeconds(out.config.serviceFilter.period[i].time[j].start)])}else{timeFactor[i].push([0])}
if("end" in out.config.serviceFilter.period[i].time[j]){timeFactor[i][j].push(getGtfsTimeSeconds(out.config.serviceFilter.period[i].time[j].end))}}}else{timeFactor.push([[0]])}}
return timeFactor}else{return[[[0]]]}}
function serviceFrequencies(out,timeFactor){var end,frequencies,frequenciesObject,keys,proportion,start,timeCache,tripId,i,j,k;if("frequencies" in out.gtfs&&out.gtfsHead.frequencies.trip_id!==-1&&out.gtfsHead.frequencies.start_time!==-1&&out.gtfsHead.frequencies.end_time!==-1&&out.gtfsHead.frequencies.headway_secs!==-1){frequencies={};timeCache={};for(i=0;i<out.gtfs.frequencies.length;i+=1){frequenciesObject=out.gtfs.frequencies[i];tripId=frequenciesObject[out.gtfsHead.frequencies.trip_id];if(tripId in out._.trip&&"frequent" in out._.trip[tripId]){if(tripId in frequencies===!1){frequencies[tripId]=[];for(j=0;j<timeFactor.length;j+=1){frequencies[tripId].push(0)}}
if(frequenciesObject[out.gtfsHead.frequencies.start_time]in timeCache===!1){timeCache[frequenciesObject[out.gtfsHead.frequencies.start_time]]=getGtfsTimeSeconds(frequenciesObject[out.gtfsHead.frequencies.start_time])}
start=timeCache[frequenciesObject[out.gtfsHead.frequencies.start_time]];if(frequenciesObject[out.gtfsHead.frequencies.end_time]in timeCache===!1){timeCache[frequenciesObject[out.gtfsHead.frequencies.end_time]]=getGtfsTimeSeconds(frequenciesObject[out.gtfsHead.frequencies.end_time])}
end=timeCache[frequenciesObject[out.gtfsHead.frequencies.end_time]];if(end<start){end+=86400}
for(j=0;j<timeFactor.length;j+=1){if(j<out._.trip[tripId].service.length&&out._.trip[tripId].service[j]!==0){if(timeFactor[j].length===1&&timeFactor[j][0].length===1&&timeFactor[j][0][0]===0){frequencies[tripId][j]+=(end-start)/parseInt(frequenciesObject[out.gtfsHead.frequencies.headway_secs],10)}else{for(k=0;k<timeFactor[j].length;k+=1){if(timeFactor[j][k][0]<end&&(timeFactor[j][k].length===1||start<timeFactor[j][k][1])){proportion=1;if(timeFactor[j][k][0]>start){proportion=proportion-((timeFactor[j][k][0]-start)/(end-start))}
if(timeFactor[j][k][1]<end){proportion=proportion-((end-timeFactor[j][k][1])/(end-start))}
frequencies[tripId][j]+=(end-start)*proportion/parseInt(frequenciesObject[out.gtfsHead.frequencies.headway_secs],10)}}}}}}}
keys=Object.keys(frequencies);for(i=0;i<keys.length;i+=1){for(j=0;j<frequencies[keys[i]].length;j+=1){out._.trip[keys[i]].service[j]=out._.trip[keys[i]].service[j]*frequencies[keys[i]][j]}}}
return out}
function serviceTrip(out){var dayCount,hour,inPeriod,minutes,time,total_minutes,i,j,k;var dayFactor=createDayFactor(out);var timeFactor=createTimeFactor(out);var trips=Object.keys(out._.trip);var scheduled=[];for(i=0;i<timeFactor.length;i+=1){scheduled.push(0)}
out.summary.service=[];for(i=0;i<trips.length;i+=1){if(out._.trip[trips[i]].stops.length<2||Object.keys(out._.trip[trips[i]].calendar).length===0){delete out._.trip[trips[i]]}else{if(out.config.allowDuration){minutes=[];out._.trip[trips[i]].minutes=[];for(j=0;j<scheduled.length;j+=1){out._.trip[trips[i]].minutes.push(0);minutes.push([])}}else{minutes=null}
for(j=0;j<dayFactor.length;j+=1){dayCount=0;for(k=0;k<dayFactor[j].length;k+=1){if(dayFactor[j][k]in out._.trip[trips[i]].calendar){dayCount+=1}}
out._.trip[trips[i]].service.push((dayCount/dayFactor[j].length)*out.config.servicePer)}
if("frequent" in out._.trip[trips[i]]===!1){if("start" in out._.trip[trips[i]]&&"end" in out._.trip[trips[i]]){time=((out._.trip[trips[i]].end-out._.trip[trips[i]].start)/2)+out._.trip[trips[i]].start}else{time=null}
for(j=0;j<timeFactor.length;j+=1){if(j<out._.trip[trips[i]].service.length&&out._.trip[trips[i]].service[j]!==0){if((timeFactor[j].length>1||timeFactor[j][0].length>1||timeFactor[j][0][0]!==0)){inPeriod=!1;if(time!==null){for(k=0;k<timeFactor[j].length;k+=1){if(time>timeFactor[j][k][0]&&(timeFactor[j][k].length===1||time<timeFactor[j][k][1])){inPeriod=!0;break}}}
if(inPeriod==!1){out._.trip[trips[i]].service[j]=0;if(out.config.allowDuration){out._.trip[trips[i]].minutes[j]=0}}}else{inPeriod=!0}
if(inPeriod){scheduled[j]=scheduled[j]+1;hour=Math.floor(time/3600);if(out.summary.service[hour]===undefined){out.summary.service[hour]=[];for(k=0;k<timeFactor.length;k+=1){out.summary.service[hour].push(0)}}
out.summary.service[hour][j]=out.summary.service[hour][j]+1;if(out.config.allowDuration){if(out._.trip[trips[i]].start>out._.trip[trips[i]].end){minutes[j].push(((out._.trip[trips[i]].end+86400)-out._.trip[trips[i]].start)/60)}else{minutes[j].push((out._.trip[trips[i]].end-out._.trip[trips[i]].start)/60)}}}}}}
if(minutes!==null){for(j=0;j<minutes.length;j+=1){if(minutes[j].length>0){total_minutes=0;for(k=0;k<minutes[j].length;k+=1){total_minutes=total_minutes+minutes[j][k]}
out._.trip[trips[i]].minutes[j]=Math.round(total_minutes/k)}else{out._.trip[trips[i]].minutes[j]=0}}}}}
for(i=0;i<out.summary.service.length;i+=1){if(out.summary.service[i]!==undefined){for(j=0;j<out.summary.service[i].length;j+=1){if(scheduled[j]>0){out.summary.service[i][j]=out.summary.service[i][j]/scheduled[j]}}}}
out=serviceFrequencies(out,timeFactor);return out}
function createRoutes(out){var contentString,color,position,override,reference,route,routeId,wildcard,i,j;for(i=0;i<out.gtfs.routes.length;i+=1){route=out.gtfs.routes[i];routeId=route[out.gtfsHead.routes.route_id];if(routeId in out._.routes&&((out.config.modeInclude.length===0)||(out.gtfsHead.routes.route_type!==-1&&out.config.modeInclude.indexOf(route[out.gtfsHead.routes.route_type])>=0))){reference={"slug":""};if(out.config.networkFilter.type==="agency"&&out.gtfsHead.routes.agency_id!==-1&&route[out.gtfsHead.routes.agency_id]in out.config.productOverride){override=out.config.productOverride[route[out.gtfsHead.routes.agency_id]]}else{if(out.config.networkFilter.type==="mode"&&out.gtfsHead.routes.route_type!==-1&&route[out.gtfsHead.routes.route_type]in out.config.productOverride){override=out.config.productOverride[route[out.gtfsHead.routes.route_type]]}else{override={}}}
if(out.config.allowRoute||out.config.allowRouteLong){contentString="";if(out.config.allowRoute&&routeId in out.config.routeOverride&&"route_short_name" in out.config.routeOverride[routeId]){contentString=out.config.routeOverride[routeId].route_short_name}else{if(out.config.allowRoute&&out.gtfsHead.routes.route_short_name!==-1){contentString=route[out.gtfsHead.routes.route_short_name].trim()}}
if(out.config.allowRouteLong&&routeId in out.config.routeOverride&&"route_long_name" in out.config.routeOverride[routeId]){if(contentString!==""){contentString+=": "}
contentString+=out.config.routeOverride[routeId].route_long_name}else{if(out.config.allowRouteLong&&out.gtfsHead.routes.route_long_name!==-1){if(contentString!==""){contentString+=": "}
contentString+=route[out.gtfsHead.routes.route_long_name].trim()}}
if(contentString!==""){reference.n=contentString;reference.slug+=contentString}}
if(out.config.allowColor){color=[["route_color","c"],["route_text_color","t"]];for(j=0;j<color.length;j+=1){contentString="";if(routeId in out.config.routeOverride&&color[j][0]in out.config.routeOverride[routeId]){contentString=out.config.routeOverride[routeId][color[j][0]]}else{if(color[j][0]in override){contentString=override[color[j][0]]}else{if(out.gtfsHead.routes[color[j][0]]!==-1){contentString=route[out.gtfsHead.routes[color[j][0]]].trim()}}}
if(contentString.length===6){contentString="#"+contentString;out=addToReference(out,"color",contentString);if(color[j][1]==="t"&&"c" in reference&&reference.c===out._.color[contentString]){if(contentString.toLowerCase()==="#ffffff"){contentString="#000000"}else{contentString="#ffffff"}
out=addToReference(out,"color",contentString)}
reference[color[j][1]]=out._.color[contentString];reference.slug+=contentString}}}
if(out.config.allowRouteUrl){contentString="";if(routeId in out.config.routeOverride&&"route_url" in out.config.routeOverride[routeId]){contentString=out.config.routeOverride[routeId].route_url}else{if(out.gtfsHead.routes.route_url!==-1){contentString=route[out.gtfsHead.routes.route_url].trim()}}
if(contentString!==""){wildcard="[*]";position=contentString.lastIndexOf(wildcard);if(position===-1&&"n" in reference){position=contentString.lastIndexOf(reference.n);if(position!==-1){contentString=contentString.substring(0,position)+wildcard+contentString.substring(position+reference.n.length)}}
if(position===-1){position=contentString.lastIndexOf(routeId);if(position!==-1){contentString=contentString.substring(0,position)+wildcard+contentString.substring(position+routeId.length);reference.i=routeId}}
out=addToReference(out,"url",contentString);reference.u=out._.url[contentString];reference.slug+=contentString}}
if(out.config.networkFilter.type==="agency"){if("agency_id" in out.gtfsHead.routes&&out.gtfsHead.routes.agency_id!==-1){out._.routes[routeId].product=out._.productIndex[route[out.gtfsHead.routes.agency_id]]}else{out._.routes[routeId].product=0}}else{if(out.config.networkFilter.type==="mode"&&"route_type" in out.gtfsHead.routes&&out.gtfsHead.routes.route_type!==-1){out._.routes[routeId].product=out._.productIndex[route[out.gtfsHead.routes.route_type]]}else{out._.routes[routeId].product=out._.productIndex[Object.keys(out._.productIndex)[0]]}}
if(Object.keys(reference).length>1){out._.routes[routeId].reference=reference}}}
delete out._.productIndex;return out}
function buildLink(out){var add,backward,blockDwells,blockNodes,check,dwells,forward,isBackward,keys,line,merge,nodeCount,nodes,nodeStack,reference,routeId,stops,thisLink,trips,i,j,k,l;var link={};var skipTrip={};function isCircular(out,routeId,trip,nodes){var check,stops,target,i,j;if(out.config.isCircular.length>0){if(routeId in out._.circular){return!0}else{return!1}}
if(nodes.length<3||nodes[0]!==nodes[nodes.length-1]){return!1}
if("block" in trip&&trip.block.trips.length>1){target=nodes.join(":");check=null;for(i=0;i<trip.block.trips.length;i+=1){if(trip.block.trips[i]in out._.trip){stops=out._.trip[trip.block.trips[i]].stops.slice().sort(function(a,b){return a[0]-b[0]});check=[];for(j=0;j<stops.length;j+=1){check.push(stops[j][1])}
if(check.join(":")!==target){check=null;break}}}
if(check!==null){return!0}}
if(nodes.length<5){return!1}
if(haversineDistance(out.aquius.node[nodes[1]][1],out.aquius.node[nodes[1]][0],out.aquius.node[nodes[nodes.length-2]][1],out.aquius.node[nodes[nodes.length-2]][0])>200){return!0}
return!1}
function mergeService(serviceA,serviceB){var service,i;if(serviceA.length===1&&serviceA.length===serviceB.length){return[serviceA[0]+serviceB[0]]}
service=[];for(i=0;i<serviceA.length;i+=1){if(i<serviceB.length){service.push(serviceA[i]+serviceB[i])}}
return service}
function mergeDuration(minutesA,minutesB){var duration,i;if(minutesA===minutesB){return minutesA}
duration=[];for(i=0;i<minutesA.length;i+=1){if(i>minutesB.length){break}
if(minutesB[i]===0){duration.push(minutesA[i])}else if(minutesA[i]===0){duration.push(minutesB[i])}else{duration.push(Math.round((minutesA[i]+minutesB[i])/2))}}
return duration}
trips=Object.keys(out._.trip);for(i=0;i<trips.length;i+=1){routeId=out._.trip[trips[i]].route_id;if(trips[i]in skipTrip===!1&&routeId in out._.routes&&"product" in out._.routes[routeId]){isBackward=!1;nodes=[];nodeCount={};dwells=[];out._.trip[trips[i]].stops.sort(function(a,b){return a[0]-b[0]});reference={};if("reference" in out._.routes[routeId]&&out._.routes[routeId].reference.slug in reference===!1){reference[out._.routes[routeId].reference.slug]=out._.routes[routeId].reference}
if("reference" in out._.trip[trips[i]]&&out._.trip[trips[i]].reference.slug in reference===!1){reference[out._.trip[trips[i]].reference.slug]=out._.trip[trips[i]].reference}
if("block" in out._.trip[trips[i]]&&out._.trip[trips[i]].block.trips.length>1&&(out.config.isCircular.length===0||routeId in out._.circular==!1)){merge=[];for(j=0;j<out._.trip[trips[i]].block.trips.length;j+=1){if(out._.trip[trips[i]].block.trips[j]in skipTrip===!1&&out._.trip[trips[i]].block.trips[j]in out._.trip&&out._.trip[out._.trip[trips[i]].block.trips[j]].service.join(":")===out._.trip[trips[i]].service.join(":")&&out._.trip[out._.trip[trips[i]].block.trips[j]].route_id in out._.routes&&out._.routes[out._.trip[out._.trip[trips[i]].block.trips[j]].route_id].product===out._.routes[routeId].product&&"start" in out._.trip[out._.trip[trips[i]].block.trips[j]]&&"end" in out._.trip[out._.trip[trips[i]].block.trips[j]]){stops=out._.trip[out._.trip[trips[i]].block.trips[j]].stops.sort(function(a,b){return a[0]-b[0]});blockNodes=[];blockDwells=[];for(k=0;k<stops.length;k+=1){blockNodes.push(stops[k][1]);blockDwells.push(stops[k][2])}
merge.push([(out._.trip[out._.trip[trips[i]].block.trips[j]].start+out._.trip[out._.trip[trips[i]].block.trips[j]].end)/2,blockNodes,out._.trip[trips[i]].block.trips[j],blockDwells])}}
if(merge.length>1){merge.sort(function(a,b){return a[0]-b[0]});for(j=0;j<merge.length;j+=1){if(merge[j][1].length>0){if(nodes.length>0&&merge[j][1][0]===nodes[nodes.length-1]){merge[j][1]=merge[j][1].slice(1);merge[j][3]=merge[j][3].slice(1)}
nodes=nodes.concat(merge[j][1]);dwells=dwells.concat(merge[j][3]);if(merge[j][2]!==trips[i]){skipTrip[merge[j][2]]="";check=["t","setdown","pickup"];for(k=0;k<check.length;k+=1){if(check[k]in out._.trip[merge[j][2]]){if(check[k]in out._.trip[trips[i]]===!1){out._.trip[trips[i]][check[k]]=[]}
for(l=0;l<out._.trip[merge[j][2]][check[k]].length;l+=1){if(out._.trip[trips[i]][check[k]].indexOf(out._.trip[merge[j][2]][check[k]][l])===-1){out._.trip[trips[i]][check[k]].push(out._.trip[merge[j][2]][check[k]][l])}}}}
if(out._.trip[merge[j][2]].route_id in out._.routes&&"reference" in out._.routes[out._.trip[merge[j][2]].route_id]&&out._.routes[out._.trip[merge[j][2]].route_id].reference.slug in reference===!1){reference[out._.routes[out._.trip[merge[j][2]].route_id].reference.slug]=out._.routes[out._.trip[merge[j][2]].route_id].reference}
if("reference" in out._.trip[merge[j][2]]&&out._.trip[merge[j][2]].reference.slug in reference===!1){reference[out._.trip[merge[j][2]].reference.slug]=out._.trip[merge[j][2]].reference}}}}}}
forward="f"+out._.routes[routeId].product;if(out.config.mirrorLink){backward="f"+out._.routes[routeId].product}
if("setdown" in out._.trip[trips[i]]&&out._.trip[trips[i]].setdown.length>0){out._.trip[trips[i]].setdown.sort();forward+="s"+out._.trip[trips[i]].setdown.join(":")}
if("pickup" in out._.trip[trips[i]]&&out._.trip[trips[i]].pickup.length>0){out._.trip[trips[i]].pickup.sort();forward+="u"+out._.trip[trips[i]].pickup.join(":");if(out.config.mirrorLink){backward+="s"+out._.trip[trips[i]].pickup.join(":")}}
if(out.config.mirrorLink&&"setdown" in out._.trip[trips[i]]&&out._.trip[trips[i]].setdown.length>0){backward+="u"+out._.trip[trips[i]].setdown.join(":")}
if("t" in out._.trip[trips[i]]){forward+="t"+out._.trip[trips[i]].t.join(":");if(out.config.mirrorLink){backward+="t"+out._.trip[trips[i]].t.join(":")}}
if(nodes.length===0){add=!0}else{add=!1}
for(j=0;j<out._.trip[trips[i]].stops.length;j+=1){if(add){nodes.push(out._.trip[trips[i]].stops[j][1]);dwells.push(out._.trip[trips[i]].stops[j][2])}
if(out._.trip[trips[i]].stops[j][1]in nodeCount){nodeCount[out._.trip[trips[i]].stops[j][1]]+=1}else{nodeCount[out._.trip[trips[i]].stops[j][1]]=1}}
if(out.config.mirrorLink){backward=nodes.slice().reverse().join(":")+backward}
forward=nodes.join(":")+forward;if(forward in link&&"b" in out._.trip[trips[i]]===!1){link[forward].service=mergeService(link[forward].service,out._.trip[trips[i]].service);if("minutes" in link[forward]&&"minutes" in out._.trip[trips[i]]){link[forward].minutes=mergeDuration(link[forward].minutes,out._.trip[trips[i]].minutes)}
if("dwells" in link[forward]){link[forward].dwells=mergeDuration(link[forward].dwells,dwells)}}else{if(out.config.mirrorLink&&backward in link&&"b" in out._.trip[trips[i]]===!1){isBackward=!0;link[backward].service=mergeService(link[backward].service,out._.trip[trips[i]].service);if("minutes" in link[backward]&&"minutes" in out._.trip[trips[i]]){link[backward].minutes=mergeDuration(link[backward].minutes,out._.trip[trips[i]].minutes)}
if("dwells" in link[backward]){link[backward].dwells=mergeDuration(link[backward].dwells,dwells)}
if("direction" in link[backward]){delete link[backward].direction}}else{link[forward]={"direction":1,"product":out._.routes[routeId].product,"route":nodes,"service":out._.trip[trips[i]].service,"dwells":dwells,};if("minutes" in out._.trip[trips[i]]){link[forward].minutes=out._.trip[trips[i]].minutes}
if("setdown" in out._.trip[trips[i]]){nodeStack=[];for(j=0;j<out._.trip[trips[i]].setdown.length;j+=1){if(out._.trip[trips[i]].setdown[j]in nodeCount&&nodeCount[out._.trip[trips[i]].setdown[j]]===1){nodeStack.push(out._.trip[trips[i]].setdown[j])}}
if(nodeStack.length>0){link[forward].setdown=nodeStack}}
if("pickup" in out._.trip[trips[i]]){nodeStack=[];for(j=0;j<out._.trip[trips[i]].pickup.length;j+=1){if(out._.trip[trips[i]].pickup[j]in nodeCount&&nodeCount[out._.trip[trips[i]].pickup[j]]===1){nodeStack.push(out._.trip[trips[i]].pickup[j])}}
if(nodeStack.length>0){link[forward].pickup=nodeStack}}
if(isCircular(out,routeId,out._.trip[trips[i]],nodes)){link[forward].circular=1}
if("b" in out._.trip[trips[i]]){link[forward].b=out._.trip[trips[i]].b}
if("t" in out._.trip[trips[i]]){nodeStack=[];for(j=0;j<out._.trip[trips[i]].t.length;j+=1){if(out._.trip[trips[i]].t[j]in nodeCount&&nodeCount[out._.trip[trips[i]].t[j]]===1){nodeStack.push(out._.trip[trips[i]].t[j])}}
if(nodeStack.length>0){link[forward].t=nodeStack}}}}
keys=Object.keys(reference);if(keys.length>0){if(isBackward&&"reference" in link[backward]===!1){link[backward].reference=[];link[backward].referenceLookup={}}
if(isBackward==!1&&"reference" in link[forward]===!1){link[forward].reference=[];link[forward].referenceLookup={}}
for(j=0;j<keys.length;j+=1){if(isBackward&&keys[j]in link[backward].referenceLookup===!1){link[backward].reference.push(reference[keys[j]]);link[backward].referenceLookup[keys[j]]=""}
if(isBackward===!1&&keys[j]in link[forward].referenceLookup===!1){link[forward].reference.push(reference[keys[j]]);link[forward].referenceLookup[keys[j]]=""}}}}}
delete out._.nodeLookup;delete out._.routes;delete out._.trip;out.aquius.link=[];out.summary.network=[];for(i=0;i<out.aquius.network.length;i+=1){if("service" in out.aquius){out.summary.network.push([]);for(j=0;j<out.aquius.service.length;j+=1){out.summary.network[i].push(0)}}else{out.summary.network.push([0])}}
keys=Object.keys(link);for(i=0;i<keys.length;i+=1){thisLink=link[keys[i]];for(j=0;j<thisLink.service.length;j+=1){for(k=0;k<out.aquius.network.length;k+=1){if(out.aquius.network[k][0].indexOf(thisLink.product)!==-1){out.summary.network[k][j]+=thisLink.service[j]}}
if(thisLink.service[j]<10){thisLink.service[j]=parseFloat(thisLink.service[j].toPrecision(1))}else{thisLink.service[j]=parseInt(thisLink.service[j],10)}}
if(out.config.allowWaypoint===!1&&"pickup" in thisLink&&"setdown" in thisLink){for(j=thisLink.pickup.length-1;j>=0;j--){check=thisLink.setdown.indexOf(thisLink.pickup[j]);if(check!==-1){for(k=thisLink.route.length-1;k>=0;k--){if(thisLink.route[k]===thisLink.pickup[j]){thisLink.route.splice(k,1)}}
thisLink.pickup.splice(j,1);thisLink.setdown.splice(check,1)}}}
line=[[thisLink.product],thisLink.service,thisLink.route,{}];if("reference" in thisLink){for(j=0;j<thisLink.reference.length;j+=1){delete thisLink.reference[j].slug}
line[3].r=thisLink.reference}
if("color" in thisLink){line[3].o=thisLink.color}
if("circular" in thisLink){line[3].c=1}
if("direction" in thisLink){line[3].d=1}
if("pickup" in thisLink){line[3].u=thisLink.pickup}
if("setdown" in thisLink){line[3].s=thisLink.setdown}
if("t" in thisLink){line[3].t=thisLink.t}
if("b" in thisLink){line[3].b=thisLink.b}
if("minutes" in thisLink){line[3].m=thisLink.minutes}
if(out.config.allowDwell&&"dwells" in thisLink){line[3].w=thisLink.dwells}
out.aquius.link.push(line)}
out.aquius.link.sort(function(a,b){return b[1].reduce(function(c,d){return c+d},0)-a[1].reduce(function(c,d){return c+d},0)});for(i=0;i<out.summary.network.length;i+=1){for(j=0;j<out.summary.network[i].length;j+=1){out.summary.network[i][j]=Math.round(out.summary.network[i][j])}}
delete out._.dayFactor;return out}
function optimiseNode(out){var keys,newNode,newNodeLookup,nodeArray,i,j;var nodeOccurance={};for(i=0;i<out.aquius.link.length;i+=1){nodeArray=out.aquius.link[i][2];if("u" in out.aquius.link[i][3]){nodeArray=nodeArray.concat(out.aquius.link[i][3].u)}
if("s" in out.aquius.link[i][3]){nodeArray=nodeArray.concat(out.aquius.link[i][3].s)}
if("t" in out.aquius.link[i][3]){nodeArray=nodeArray.concat(out.aquius.link[i][3].t)}
for(j=0;j<nodeArray.length;j+=1){if(nodeArray[j]in nodeOccurance===!1){nodeOccurance[nodeArray[j]]=1}else{nodeOccurance[nodeArray[j]]+=1}}}
nodeArray=[];keys=Object.keys(nodeOccurance);for(i=0;i<keys.length;i+=1){nodeArray.push([nodeOccurance[keys[i]],keys[i]])}
nodeArray.sort(function(a,b){return a[0]-b[0]});nodeArray.reverse();newNode=[];newNodeLookup={};for(i=0;i<nodeArray.length;i+=1){newNode.push(out.aquius.node[nodeArray[i][1]]);newNodeLookup[nodeArray[i][1]]=i}
out.aquius.node=newNode;for(i=0;i<out.aquius.link.length;i+=1){for(j=0;j<out.aquius.link[i][2].length;j+=1){out.aquius.link[i][2][j]=newNodeLookup[out.aquius.link[i][2][j]]}
if("u" in out.aquius.link[i][3]){for(j=0;j<out.aquius.link[i][3].u.length;j+=1){out.aquius.link[i][3].u[j]=newNodeLookup[out.aquius.link[i][3].u[j]]}}
if("s" in out.aquius.link[i][3]){for(j=0;j<out.aquius.link[i][3].s.length;j+=1){out.aquius.link[i][3].s[j]=newNodeLookup[out.aquius.link[i][3].s[j]]}}
if("t" in out.aquius.link[i][3]){for(j=0;j<out.aquius.link[i][3].t.length;j+=1){out.aquius.link[i][3].t[j]=newNodeLookup[out.aquius.link[i][3].t[j]]}}}
return out}
function isPointInFeature(x,y,feature){var i;function isPointInPolygon(x,y,polygonArray){var inside,intersect,xj,xk,yj,yk,i,j,k;if(Array.isArray(polygonArray)){for(i=0;i<polygonArray.length;i+=1){if(Array.isArray(polygonArray[i])){inside=!1;for(j=0,k=polygonArray[i].length-1;j<polygonArray[i].length;k=j++){xj=polygonArray[i][j][0];yj=polygonArray[i][j][1];xk=polygonArray[i][k][0];yk=polygonArray[i][k][1];intersect=((yj>y)!=(yk>y))&&(x<(xk-xj)*(y-yj)/(yk-yj)+xj);if(intersect){inside=!inside}}
if(inside&&i===0&&polygonArray.length===1){return!0}
if(inside===!1&&i===0){return!1}
if(inside&&i>0){return!1}
if(i===polygonArray.length-1){return!0}}}}
return!1}
if("geometry" in feature===!1||"type" in feature.geometry===!1||"coordinates" in feature.geometry===!1||!Array.isArray(feature.geometry.coordinates)){return!1}
if(feature.geometry.type==="MultiPolygon"){for(i=0;i<feature.geometry.coordinates.length;i+=1){if(isPointInPolygon(x,y,feature.geometry.coordinates[i])){return!0}}}
if(feature.geometry.type==="Polygon"){return isPointInPolygon(x,y,feature.geometry.coordinates)}
return!1}
function getCentroidFromFeature(feature){var i;var bounds={};function getCentroidFromPolygon(polygonArray,bounds){var i,j;if(Array.isArray(polygonArray)){for(i=0;i<polygonArray.length;i+=1){if(Array.isArray(polygonArray[i])){for(j=0;j<polygonArray[i].length;j+=1){if(Array.isArray(polygonArray[i][j])&&polygonArray[i][j].length===2){if("maxX" in bounds===!1){bounds.maxX=polygonArray[i][j][0];bounds.minX=polygonArray[i][j][0];bounds.maxY=polygonArray[i][j][1];bounds.minY=polygonArray[i][j][1]}else{if(polygonArray[i][j][0]>bounds.maxX){bounds.maxX=polygonArray[i][j][0]}else{if(polygonArray[i][j][0]<bounds.minX){bounds.minX=polygonArray[i][j][0]}}
if(polygonArray[i][j][1]>bounds.maxY){bounds.maxY=polygonArray[i][j][1]}else{if(polygonArray[i][j][1]<bounds.minY){bounds.minY=polygonArray[i][j][1]}}}}}}}}
return bounds}
if("geometry" in feature&&"type" in feature.geometry&&"coordinates" in feature.geometry&&Array.isArray(feature.geometry.coordinates)){if(feature.geometry.type==="MultiPolygon"){for(i=0;i<feature.geometry.coordinates.length;i+=1){bounds=getCentroidFromPolygon(feature.geometry.coordinates[i],bounds)}}
if(feature.geometry.type==="Polygon"){bounds=getCentroidFromPolygon(feature.geometry.coordinates,bounds)}}
if("maxX" in bounds){return[(bounds.maxX+bounds.minX)/2,(bounds.maxY+bounds.minY)/2]}else{return null}}
function buildPlace(out,options){var centroid,checked,content,distance,index,key,keys,lastDiff,minDistance,node,population,xyDiff,i,j;var centroidLookup={};var centroidStack={};var centroidKeys=[];var nodeStack=[];var thisPlace=-1;var precision=Math.pow(10,out.config.coordinatePrecision);var previousPlace=0;var placeCoordStack={};var placeStack={};var maxPopulation=0;var removeNode={};out.aquius.place=[];if(typeof options==="object"&&"geojson" in options&&"type" in options.geojson&&options.geojson.type==="FeatureCollection"&&"features" in options.geojson&&Array.isArray(options.geojson.features)&&options.geojson.features.length>0){for(i=0;i<options.geojson.features.length;i+=1){centroid=getCentroidFromFeature(options.geojson.features[i]);if(centroid!==null){centroidKeys.push(i);centroidStack[i]={"x":Math.round(centroid[0]*precision)/precision,"y":Math.round(centroid[1]*precision)/precision};centroidLookup[centroidStack[i].x+":"+centroidStack[i].y]=i}}
for(i=0;i<out.aquius.node.length;i+=1){nodeStack.push([out.aquius.node[i][0]+out.aquius.node[i][1],i])}
nodeStack.sort();for(i=0;i<nodeStack.length;i+=1){thisPlace=-1;node=out.aquius.node[nodeStack[i][1]];key=node[0]+":"+node[1];if(key in out.config.nodeGeojson&&out.config.nodeGeojson[key]in centroidLookup){thisPlace=centroidLookup[out.config.nodeGeojson[key]]}
if(thisPlace===-1&&isPointInFeature(node[0],node[1],options.geojson.features[previousPlace])){thisPlace=previousPlace}
if(thisPlace===-1){checked={};checked[previousPlace]=previousPlace;for(j=0;j<centroidKeys.length;j+=1){xyDiff=Math.abs((node[0]+node[1])-(centroidStack[centroidKeys[j]].x+centroidStack[centroidKeys[j]].y));if(j===0){lastDiff=xyDiff}
if(lastDiff>=xyDiff&&centroidKeys[j]in checked===!1){if(isPointInFeature(node[0],node[1],options.geojson.features[centroidKeys[j]])){thisPlace=centroidKeys[j];break}
checked[centroidKeys[j]]=centroidKeys[j];if(Object.keys(checked).length<5){lastDiff=xyDiff}}}
if(thisPlace===-1){for(j=0;j<options.geojson.features.length;j+=1){if(j in checked===!1&&isPointInFeature(node[0],node[1],options.geojson.features[j])){thisPlace=j;break}}}
if(thisPlace===-1&&out.config.inGeojson===!1){minDistance=-1;for(j=0;j<centroidKeys.length;j+=1){distance=haversineDistance(node[1],node[0],centroidStack[centroidKeys[j]].y,centroidStack[centroidKeys[j]].x);if(minDistance===-1||distance<minDistance){minDistance=distance;thisPlace=j}}}}
if(thisPlace!==-1){previousPlace=thisPlace;if(thisPlace in placeStack){out.aquius.node[nodeStack[i][1]][2].p=placeStack[thisPlace]}else{if(thisPlace in centroidStack){key=[centroidStack[thisPlace].x,centroidStack[thisPlace].y].join(":");if(key in placeCoordStack){index=placeCoordStack[key]}else{out.aquius.place.push([centroidStack[thisPlace].x,centroidStack[thisPlace].y,{}]);index=out.aquius.place.length-1;placeCoordStack[key]=index}
out.aquius.node[nodeStack[i][1]][2].p=index;placeStack[thisPlace]=index;if("properties" in options.geojson.features[thisPlace]&&out.config.populationProperty in options.geojson.features[thisPlace].properties){population=parseFloat(options.geojson.features[thisPlace].properties[out.config.populationProperty]);if(!Number.isNaN(population)){if("p" in out.aquius.place[index][2]===!1){out.aquius.place[index][2].p=0}
out.aquius.place[index][2].p+=population;if(out.aquius.place[index][2].p>maxPopulation){maxPopulation=out.aquius.place[index][2].p}}}
if("properties" in options.geojson.features[thisPlace]&&out.config.placeNameProperty in options.geojson.features[thisPlace].properties&&options.geojson.features[thisPlace].properties[out.config.placeNameProperty]!==null){content={};content.n=options.geojson.features[thisPlace].properties[out.config.placeNameProperty].trim();if(content.n!==""){if("r" in out.aquius.place[index][2]===!1){out.aquius.place[index][2].r=[]}
out.aquius.place[index][2].r.push(content)}}}}
if(thisPlace in centroidStack){out.config.nodeGeojson[node[0]+":"+node[1]]=centroidStack[thisPlace].x+":"+centroidStack[thisPlace].y}}else{if(out.config.inGeojson===!0){removeNode[nodeStack[i][1]]=""}}}
if(maxPopulation>0&&"placeScale" in out.config.option===!1){out.config.option.placeScale=Math.round((1/(maxPopulation/2e6))*1e5)/1e5;if("option" in out.aquius===!1){out.aquius.option={}}
out.aquius.option.placeScale=out.config.option.placeScale}
if(Object.keys(removeNode).length>0){keys=Object.keys(out._.nodeLookup);for(i=0;i<keys.length;i+=1){if(out._.nodeLookup[keys[i]]in removeNode){delete out._.nodeLookup[keys[i]]}}}}
return out}
function stopPlace(out){var keys,node,stops,i,j,k;if(out.config.stopPlace===!0&&"place" in out.aquius){stops={};keys=Object.keys(out._.nodeLookup);for(i=0;i<keys.length;i+=1){if(out._.nodeLookup[keys[i]]in stops===!1){stops[out._.nodeLookup[keys[i]]]=[]}
stops[out._.nodeLookup[keys[i]]].push(keys[i])}
for(i=0;i<out.aquius.place.length;i+=1){node=-1;for(j=0;j<out.aquius.node.length;j+=1){if("p" in out.aquius.node[j][2]&&out.aquius.node[j][2].p===i){if(node===-1){out.aquius.node[j][0]=out.aquius.place[i][0];out.aquius.node[j][1]=out.aquius.place[i][1];if("r" in out.aquius.place[i][2]){out.aquius.node[j][2].r=out.aquius.place[i][2].r}else{if("r" in out.aquius.node[j][2]){delete out.aquius.node[j][2].r}}
node=j}else{if(j in stops){for(k=0;k<stops[j].length;k+=1){out._.nodeLookup[stops[j][k]]=node}}}}}}}
return out}
function applyZeroCoordWarning(out){let keys,zeroCoord,i;if("stopOverride" in out.config){keys=Object.keys(out.config.stopOverride);zeroCoord=[];for(i=0;i<keys.length;i+=1){if("x" in out.config.stopOverride[keys[i]]&&out.config.stopOverride[keys[i]].x===0&&"y" in out.config.stopOverride[keys[i]]&&out.config.stopOverride[keys[i]].y===0){zeroCoord.push(keys[i])}}
if(zeroCoord.length>0){if("warning" in out===!1){out.warning=[]}
out.warning.push("Caution: Contains "+zeroCoord.length.toString()+" stop_id with coordinates 0,0, which can be corrected in config.stopOverride,"+" or ignored by setting config.allowZeroCoordinate to false.")}}
return out}
function buildNetworkTable(out,options){if("aquius" in out&&"network" in out.aquius&&"summary" in out&&"network" in out.summary){let tableData,tableFormat,tableHeader,prefix,i;if("_vars" in options&&"configId" in options._vars){prefix=options._vars.configId}else{prefix=""}
tableHeader=["Network"];tableFormat=[prefix+"Text"];if("service" in out.aquius===!1||out.aquius.service.length===0){tableHeader.push("Service");tableFormat.push(prefix+"Number")}else{for(i=0;i<out.aquius.service.length;i+=1){if("en-US" in out.aquius.service[i][1]){tableHeader.push(out.aquius.service[i][1]["en-US"])}else{tableHeader.push(JSON.stringify(out.aquius.service[i][1]))}
tableFormat.push(prefix+"Number")}}
tableData=[];for(i=0;i<out.summary.network.length;i+=1){if("en-US" in out.aquius.network[i][1]){tableData.push([out.aquius.network[i][1]["en-US"]].concat(out.summary.network[i]))}else{tableData.push([JSON.stringify(out.aquius.network[i][1])].concat(out.summary.network[i]))}}
out.networkTable={"data":tableData,"format":tableFormat,"header":tableHeader,}}
return out}
function buildSummaryTable(out,options){if("summary" in out&&"service" in out.summary&&out.summary.service.length>0){let tableData,tableFormat,tableHeader,tableRow,prefix,i,j;if("_vars" in options&&"configId" in options._vars){prefix=options._vars.configId}else{prefix=""}
tableHeader=["Hour"];tableFormat=[prefix+"Number"];if("service" in out.aquius===!1||out.aquius.service.length===0){tableHeader.push("All")
tableFormat.push(prefix+"Number")}else{for(i=0;i<out.aquius.service.length;i+=1){if("en-US" in out.aquius.service[i][1]){tableHeader.push(out.aquius.service[i][1]["en-US"])}else{tableHeader.push(JSON.stringify(out.aquius.service[i][1]))}
tableFormat.push(prefix+"Number")}}
tableData=[];for(i=0;i<out.summary.service.length;i+=1){tableRow=[i];if(out.summary.service[i]===undefined){if("service" in out.aquius===!1||out.aquius.service.length===0){tableRow.push("-")}else{for(j=0;j<out.aquius.service.length;j+=1){tableRow.push("-")}}}else{for(j=0;j<out.summary.service[i].length;j+=1){if(out.summary.service[i][j]>0){tableRow.push((out.summary.service[i][j]*100).toFixed(2))}else{tableRow.push("-")}}}
tableData.push(tableRow)}
out.summaryTable={"data":tableData,"format":tableFormat,"header":tableHeader,}}
return out}
function exitProcess(out,options){var error;delete out._;delete out.gtfs;delete out.gtfsHead;if(typeof options==="object"&&"callback" in options){if("error" in out){error=new Error(out.error.join(". "))}
options.callback(error,out,options);return!0}else{return out}}
out=parseConfig(out,options);out=parseGtfs(out,gtfs);gtfs=null;if("error" in out){return exitProcess(out,options)}
out=defaultDates(out);out=buildHeader(out);out=buildNetwork(out);out=buildService(out);out=stopFilter(out);out=parentStopsToNode(out);out=transferStopsToNode(out);out=regularStopsToNode(out);out=buildPlace(out,options);out=stopPlace(out);out=createCalendar(out);out=baseTrip(out);out=timeTrip(out);out=duplicateTrip(out);out=serviceTrip(out);out=createRoutes(out);out=buildLink(out);out=optimiseNode(out);out=applyZeroCoordWarning(out);out=buildSummaryTable(out,options);out=buildNetworkTable(out,options);return exitProcess(out,options)}};try{module.exports={gtfsToAquius}}catch{}
